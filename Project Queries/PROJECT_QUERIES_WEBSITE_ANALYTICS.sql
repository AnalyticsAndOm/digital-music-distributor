USE SONGEVENTS;

-- GET THE DETAILS OF MOST POPULAR ARTISTS BY THE NUMBER OF LISTENERS
SELECT DISTINCT * FROM
(
	SELECT 
		E.ARTIST_NAME, S.ARTIST_ID, ARTIST_LOCATION, ARTIST_LATITUDE, ARTIST_LONGITUDE,
		COUNT(E.USER_ID) OVER(PARTITION BY E.ARTIST_NAME) AS USERS_NUMBER
    FROM EVENTS E, SONGS s
    WHERE E.ARTIST_NAME = S.ARTIST_NAME 
) AS SUB_Q1
ORDER BY USERS_NUMBER DESC;

-- IDENTIFY THE MOST POPULAR SONGS BY THE COUNT OF LISTENERS
SELECT * FROM
(
	SELECT 
		SONG_ID, E.SONG_NAME, S.ARTIST_ID, E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, 
		COUNT(USER_ID) OVER(PARTITION BY SONG_ID) USERS_NUMBER
	FROM EVENTS E, SONGS S
	WHERE E.ARTIST_NAME = S.ARTIST_NAME
) SUB_Q2 
ORDER BY USERS_NUMBER DESC;

-- IDENTIFY THE MOST PLAYED SONG IN ANY SESSION
SELECT DISTINCT * FROM 
(
	SELECT 
		SONG_NAME, ARTIST_NAME, SONG_LEVEL, 
        COUNT(SESSION_ID) OVER (PARTITION BY SONG_NAME) AS NO_OF_SESSIONS
	FROM EVENTS
    WHERE SONG_NAME IS NOT NULL
    ORDER BY NO_OF_SESSIONS DESC
) AS SUB_Q3;

--  THE SONGS THAT HAD THE MOST SESSIONS AMONG EACH USERS
SELECT DISTINCT * FROM
(
	SELECT DISTINCT 
		SONG_NAME, ARTIST_NAME, SONG_LEVEL, 
        COUNT(SESSION_ID) OVER(PARTITION BY SONG_NAME, USER_ID) REPEAT_COUNT
	FROM EVENTS
) SUB_Q4
WHERE SONG_NAME IS NOT NULL 
ORDER BY REPEAT_COUNT DESC;

-- FIND OUT ARTISTS WHOSE SONGS ARE APPEARING IN MULTIPLE SESSIONS
SELECT DISTINCT * FROM
(
	SELECT DISTINCT 
		ARTIST_NAME, 
        COUNT(SESSION_ID) OVER(PARTITION BY ARTIST_NAME) AS ARTIST_SESSIONS
	FROM EVENTS
) SUB_Q5
WHERE ARTIST_NAME IS NOT NULL 
ORDER BY ARTIST_SESSIONS DESC;

-- IDENTIFY THE CUSTOMERS WHO HAS LISTENED THE MOST NUMBER OF SONGS ON THE WEBSITE
SELECT *, DENSE_RANK() OVER(ORDER BY SONGS_LISTENED DESC) USER_RANK
FROM 
(
	SELECT DISTINCT 
		USER_ID, USER_FIRST_NAME, USER_LAST_NAME, USER_GENDER, 
        COUNT(SONG_NAME) SONGS_LISTENED
	FROM EVENTS
	WHERE 
	SONG_NAME IS NOT NULL
	GROUP BY USER_ID, USER_FIRST_NAME, USER_LAST_NAME, USER_GENDER
) SUB_Q6;

-- FIND OUT THE PERCENTAGE OF PAID AND FREE SONGS OPTED BY EACH USER
SELECT 
	USER_ID, CONCAT(USER_FIRST_NAME," ", USER_LAST_NAME) AS USERNAME, 
	ROUND(PAID_SONGS_NUMBER*100 / (PAID_SONGS_NUMBER + FREE_SONGS_NUMBER),2) PAID_SONGS_PERCENTAGE,
	ROUND(FREE_SONGS_NUMBER*100 / (PAID_SONGS_NUMBER + FREE_SONGS_NUMBER),2) FREE_SONGS_PERCENTAGE
FROM 
(
SELECT DISTINCT 
	USER_ID, USER_FIRST_NAME, USER_LAST_NAME,
	SUM(CASE SONG_LEVEL WHEN 'paid' THEN NO_ITEMS_IN_SESSION else 0 END) OVER(PARTITION BY USER_ID) AS PAID_SONGS_NUMBER,
	SUM(CASE SONG_LEVEL WHEN 'free' THEN NO_ITEMS_IN_SESSION else 0 END) OVER(PARTITION BY USER_ID) AS FREE_SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL 
) AS SUB_Q7 
ORDER BY PAID_SONGS_PERCENTAGE DESC;

-- CALCULATE THE SUM OF TOTAL TIME SPENT BY EACH CUSTOMER ON THE WEBSITE
SELECT 
	USER_ID, USER_NAME, TOTAL_PLAYTIME_IN_SECONDS,
    DENSE_RANK() OVER(ORDER BY TOTAL_PLAYTIME_IN_SECONDS DESC) AS RANK_BY_DURATION
FROM 
(
	SELECT DISTINCT 
		USER_ID, CONCAT(USER_FIRST_NAME," ",USER_LAST_NAME) AS USER_NAME, 
		ROUND(SUM(SONG_LENGTH_IN_SECONDS) OVER(PARTITION BY USER_ID),2) AS TOTAL_PLAYTIME_IN_SECONDS
	FROM EVENTS
	WHERE SONG_NAME IS NOT NULL
) AS SUB_Q8;

